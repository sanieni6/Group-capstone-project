"use strict";(self.webpackChunkartwork_listing_app=self.webpackChunkartwork_listing_app||[]).push([[179],{717:(t,e,n)=>{const a=n.p+"img/logo.png",s=n.p+"img/menu.svg",i=n.p+"img/close.svg",r=document.querySelector(".header"),o=`\n      <div class="header__wrapper">\n        <h1 class='header__logo'><span>Art</span><img class='header__logo-img' src="${a}"\n            alt="art painting illustration"><span>ork</span></h1>\n        <nav class="header__nav">\n          <button class="header__nav-btn close">\n            <img class='btn-img btn-open' src="${s}" alt="menu button icon">\n            <img class='btn-img btn-close' src="${i}" alt="close button icon">\n          </button>\n          <ul class="header__nav-list close">\n            <li class="header__nav-item"><a class='header__nav-link active' href='#'>Artworks</a></li>\n            <li class="header__nav-item"><a class='header__nav-link' href='#'>Exhibitions</a></li>\n            <li class="header__nav-item"><a class='header__nav-link' href='#'>Shop</a></li>\n          </ul>\n        </nav>\n      </div>\n`,l=n.p+"img/like.svg",c=n.p+"img/unlike.svg",m=document.querySelector(".main"),d=async t=>{const e=await t.filter((t=>null!==t.image_id)).map((t=>`\n      <figure class="artworks__item" id="${t.id}">\n        <img class="artworks__item-img" src="https://www.artic.edu/iiif/2/${t.image_id}/full/843,/0/default.jpg" alt="${t.title}">\n        <figcaption class="artworks__item-caption">\n          <h2 class="artworks__item-title">${t.title}</h2>\n          <p class="artworks__item-author">${t.artist_display}</p>\n          <div class="artworks__item-interact">\n            <div class="artworks__item-interact-likes">\n              <button class="artworks__item-btn like-btn" data-like-btn="${t.id}">\n                <img class="like-img like-icon" src="${l}" alt="like"> <img class="unlike-img unlike-icon" src="${c}" alt="like"> \n              </button>\n              <span class='like-count'>${t.likes} ${t.likes>1?"likes":"like"}</span>\n            </div>\n            <button id ="comment-${t.id}"class="artworks__item-btn comment-btn">Comment</button>\n          </div>\n        </figcaption>\n     </figure>\n    `));m.insertAdjacentHTML("afterbegin",`<div class='artworks'><h1 class="artworks__title">Artworks<span class="artworks__count"></span></h1><div class="artworks__wrapper">${e.join("")}</div></div>`)},_=async t=>{let e="no data";const n=await fetch(t);return n.ok?(e=await n.json(),e):e},u=(t,e)=>{const n=t.length;e.textContent=`(${n})`},p=(t,e,n="")=>{t.innerHTML="",""===n?e():e(n)},k=n.p+"img/close_gray.svg",g=document.querySelector(".container"),h=async t=>{const e=t.term_titles.map((t=>`<li class='artworks__modal-card-terms-item'>${t}</li>`)).join(""),n=` \n    <div class="artworks__modal">\n        <div class="artworks__modal-wrapper">\n        <button class="artworks__modal-btn">\n        <img class="artworks__modal-btn-img" src="${k}" alt="close">\n        </button>\n        <div class="artworks__modal-card">\n        <img class="artworks__modal-card-img" src="https://www.artic.edu/iiif/2/${t.image_id}/full/843,/0/default.jpg" alt="${t.title}">\n        <div class="artworks__modal-card-details">\n            <h3 class="artworks__modal-card-title">${t.title}</h3>\n            <p class="artworks__modal-card-author">\n            <span>Author:</span>\n            ${t.artist_display}\n            </p>\n            <p class="artworks__modal-card-origin">\n            <span>Origin:</span>\n            ${t.place_of_origin}\n            </p>\n            <p class="artworks__modal-card-credit">\n            <span>Credit:</span>\n            ${t.credit_line}\n            </p>\n            <ul class="artworks__modal-card-terms">\n            ${e}\n            </ul>\n        </div>\n        <div class="artworks__modal-comments">\n            <h4 class="artworks__modal-comments-title">\n            Comments\n            <span class="artworks__modal-comments-count"></span>\n            :\n            </h4>\n            <ul class="artworks__modal-comments-list">\n            </ul>\n            <form class="artworks__modal-comments-add">\n            <input type="text" name="name" id="name" placeholder="Your name" required>\n            <textarea class="artworks__modal-comments-input" name="message" id="comment" cols="30" rows="4" maxlength="500" placeholder="Your insights..." required></textarea>\n            <input type="submit" id="submit-61073" class="artworks__modal-comments-btn" value="Comment">\n            </form>\n        </div>\n        </div>\n        </div>\n        </div>\n    `;g.insertAdjacentHTML("afterbegin",n)},v=async(t,e)=>{fetch(t,{method:"POST",body:JSON.stringify(e),headers:{"Content-type":"application/json; charset=UTF-8"}})},w=t=>{const e=`https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/yf6dqoUrsU3EfHXvC1i4/comments?item_id=${t}`,n=document.querySelector(".artworks__modal-comments-list"),a=document.querySelector(".artworks__modal-comments-count");_(e).then((t=>{if("no data"===t){const t="No comments";n.innerHTML=`<li class="artworks__modal-comments-item">${t}</li>`}else{const e=t.map((t=>`<li class="artworks__modal-comments-item">${t.creation_date} ${t.username}: ${t.comment}</li>`)).join("");n.innerHTML=e}})).then((()=>{((t,e)=>{const n=t.length;1===n&&"No comments"===t[0].textContent?e.textContent="(0)":e.textContent=`(${n})`})(document.querySelectorAll(".artworks__modal-comments-item"),a)}))},f=()=>{document.querySelectorAll(".comment-btn").forEach((t=>{t.addEventListener("click",(t=>{const e=t.target.id.split("-")[1];_(`https://api.artic.edu/api/v1/artworks/${e}?fields=id,title,artist_display,place_of_origin,credit_line,term_titles,image_id`).then((t=>{((t,e="")=>{""===e?t():t(e)})(h,t.data)})).then((()=>{const t=document.querySelector(".artworks__modal"),n=document.querySelector(".container"),a=document.querySelector(".artworks__modal-btn"),s=document.querySelector(".artworks__modal-comments-add"),i=document.getElementById("name"),r=document.getElementById("comment");a.addEventListener("click",(()=>{n.removeChild(t)})),s.addEventListener("submit",(t=>{t.preventDefault(),((t,e,n)=>{v("https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/yf6dqoUrsU3EfHXvC1i4/comments",{item_id:t,username:e,comment:n}).then((()=>{setTimeout((()=>{w(t)}),1e3)}))})(e,i.value,r.value),i.value="",r.value="",setTimeout((()=>{w(e)}),1e3)}))})).then((()=>{w(e)}))}))}))},y=document.querySelector(".main");r.insertAdjacentHTML("afterbegin",o);const b=document.querySelectorAll(".header__nav-link"),$=document.querySelector(".main");var S,q;q=t=>{t.forEach((t=>{t.classList.contains("active")&&t.classList.remove("active")}))},(S=b).forEach((t=>{t.addEventListener("click",(t=>{if("Artworks"===t.target.textContent){q(S),t.target.classList.add("active"),y.innerHTML="";const e="https://api.artic.edu/api/v1/artworks?limit=20&fields=id,title,artist_display,place_of_origin,credit_line,term_titles,image_id",n="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/yf6dqoUrsU3EfHXvC1i4/likes";Promise.all([_(e),_(n)]).then((([t,e])=>{const n=t.data.map((t=>{const n=e.find((e=>e.item_id===t.id.toString()));return{...t,likes:n?n.likes:0}}));p(y,d,n)})).then((()=>{const t=document.querySelector(".artworks__count"),e=document.querySelectorAll(".artworks__item");u(e,t),document.querySelectorAll(".artworks__item-btn").forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("unlike-icon")){const e=t.target.parentElement,a=e.nextElementSibling;let s=parseInt(a.textContent.split(" ")[0],10);e.classList.add("liked");const i={item_id:e.dataset.likeBtn};v(n,i).then((()=>{s+=1,a.textContent=s>1?`${s} Likes`:`${s} Like`}))}}))}))})).then((()=>{f()}))}else("Exhibitions"===t.target.textContent||"Shop"===t.target.textContent)&&(q(S),t.target.classList.add("active"),y.innerHTML="")}))}));const L="https://us-central1-involvement-api.cloudfunctions.net/capstoneApi/apps/yf6dqoUrsU3EfHXvC1i4/likes";Promise.all([_("https://api.artic.edu/api/v1/artworks?limit=20&fields=id,title,artist_display,place_of_origin,credit_line,term_titles,image_id"),_(L)]).then((([t,e])=>{const n=t.data.map((t=>{const n=e.find((e=>e.item_id===t.id.toString()));return{...t,likes:n?n.likes:0}}));p($,d,n)})).then((()=>{const t=document.querySelector(".artworks__count"),e=document.querySelectorAll(".artworks__item");u(e,t),document.querySelectorAll(".artworks__item-btn").forEach((t=>{t.addEventListener("click",(t=>{if(t.target.classList.contains("unlike-icon")){const e=t.target.parentElement,n=e.nextElementSibling;let a=parseInt(n.textContent.split(" ")[0],10);e.classList.add("liked");const s={item_id:e.dataset.likeBtn};v(L,s).then((()=>{a+=1,n.textContent=a>1?`${a} Likes`:`${a} Like`}))}}))}))})).then((()=>{f()}))}},t=>{t(t.s=717)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,